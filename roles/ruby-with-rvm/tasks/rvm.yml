# Detect & install rvm
- name: 1. RVM > Detect rvm binary
  stat: path='{{ rvm_rvm }}'
  register: rvm_binary

- name: 1. RVM > Detect rvm installer
  stat: path='{{ rvm_temp_download_path }}/rvm-installer.sh'
  register: rvm_installer

- name: 1. RVM > Detect current rvm version
  command: "{{ rvm_rvm}} version"
  changed_when: False
  register: rvm_current_version
  when: rvm_binary.stat.exists

- name: 1. RVM > Install rvm installer
  get_url:
    url: "{{ rvm_rvm_latest_installer }}"
    dest: "{{ rvm_temp_download_path }}/rvm-installer.sh"
    mode: 0755
  when: not rvm_installer.stat.exists

# Using gpg2 with ubuntu18
- name: 2. GPG > Install gnupg2
  yum:
    name: gnupg2
    state: present
    update_cache: yes
  become_user: root

# Import GPG keys
- name: 2. GPG > Import GPG keys from keyservers
  shell: "gpg2 --batch --keyserver {{ item }} --recv-keys {{ rvm_gpg_keys }}"
  changed_when: False
  check_mode: False
  loop: "{{ rvm_gpg_key_servers }}" # using loop (with_items not support on ansible new version )
  register: gpg_import
  when: not ansible_check_mode and rvm_gpg_keys != '' and (gpg_import is not defined or gpg_import.rc != 0)
  ignore_errors: True
- debug: var=gpg_import.results

- name: 2. GPG > Was GPG import from keyservers succesfull?
  set_fact: gpg_imported_from={{ item.item }}
  loop: "{{ gpg_import.results }}"
  when: "'rc' in item and item.rc == 0"

- name: 2. GPG > Import GPG keys from rvm.io, if keyservers failed
  shell: "curl -sSL https://rvm.io/{{ item }} | gpg --batch --import -"
  loop:
    - mpapis.asc
    - pkuczynski.asc
  when: not ansible_check_mode and rvm_gpg_keys != '' and gpg_imported_from is not defined

# Install, Update, Configure rvm
- name: 3. RVM > Install rvm
  shell: >
    {{ rvm_temp_download_path }}/rvm-installer.sh {{ rvm_rvm_version }}
    --path {{ rvm_install_path }} {{ rvm_install_flags }}
  when: not rvm_binary.stat.exists

- name: 3. RVM > Detect current rvm
  command: "{{ rvm_rvm}} version"
  register: rvm_current
- debug: var=rvm_current.stdout_lines

- name: 3. RVM > Update rvm
  shell: "{{ rvm_rvm }} get {{ rvm_rvm_version }} && {{ rvm_rvm }} reload"
  changed_when: False
  when: rvm_binary.stat.exists

- name: 3. RVM > Configure rvm
  command: "{{ rvm_rvm }} autolibs {{ rvm_autolib_mode }}"
  when: not rvm_binary.stat.exists
